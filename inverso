int inverso(int a, int d)

int maior, menor; if (a > d)

{

maior = a;

menor =

d;

}

else

{

maior = d;

}

menor = a;

int tam quocientes (maior, menor, 0);

int resto, quoc;

int arr[tam]; 

int i = 0;

while (menor != 0) 



{

resto maior %% menor;

quoc = maior / menor;

maior menor;

menor = resto;

arr[i]= quoc;

i++;

}

int len = sizeof(arr)/sizeof(arr[0]); 

int semultimo[len-2];

for (int i; i <= len-2; i++) 

{

semultimo[i] = arr[i];

}

int inversa[len-2];

int c = 0; for (int i = len-2; i >=0; i--) 

{

inversa[c] = semultimo[i];

C++;

}

int results[len]; //lista dos resultados, que se forma a partir da lista inversa for (int i = 0; i <= len; i++) {

if (i == 0)

{

results[0] 1; // o primeiro elemento é =

sempre 1

results[i+1] = inversa[i] * 1; // o segundo

é o primeiro da inversa vezes 1

} else

{

results[i+1] = (inversa[i] * results[i]) + results[i-1]; // formando o resto da lista

}

}

int len2 = sizeof(arr)/sizeof(arr[0]); //tamanho da lista de resultados

len2 = len2 -1;

//interessam-nos o penúltimo e o último elementos

int penultimo = results[len2-1];

int ultimo = results[len2];

int leninv = sizeof(inversa)/sizeof(inversa[0]); //tamanho da lista inversa dos quocientes

leninv = leninv -1;

int x, y;

if (leniny % 2 == 0) // se o tamanho é par, temos

penultimo *-1 {

X = ultimo;

y = penultimo *-1;

if (a > d)

{

if (penultimo > ultimo)

{

}

else

return x;

{

}

return y;

}

else if (a < d)

{ } {

if (penultimo { ultimo)

return y;

else

return x;

}

}

}

}

else //ultimo * -1 {

y = penultimo;

x = ultimo *-1;

if (a > d)

{

if (penultimo > ultimo) {

return x;

}

else

{

return y;

}

else if (a < d)

{

if (penultimo > ultimo)

{

return y;

}

else

{

return x;
}

}

}

}
